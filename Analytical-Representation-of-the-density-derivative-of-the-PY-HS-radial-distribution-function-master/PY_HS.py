"""
This is a fast hack version written in python. 

When I get more time, I will make a proper version.

Braden Kelly, april 4, 2020

If you find this useful, please cite this as

Braden D. Kelly and William R. Smith and Douglas Henderson, 
Analytical representation of the density derivative of the Percusâ€“Yevick 
hard-sphere radial distribution function,
Molecular Physics,114,16-17,2446-2450,2016
https://doi.org/10.1080/00268976.2016.1164908

TODO (BDK) - make it proper python, rather than a fortranish python.

"""


import numpy as np

def GRPRLM(RHO):

    global C1, C2, C3
    global IG102,IG202,IG212,IG222,IG302,IG312,IG322,IG332 ,IG402,IG412,IG422,IG432,IG442,IG502,IG512,IG522,IG532,IG542
    global IG552,IT2,EX12,IG101,IG201,IG211,IG221,IG301,IG311,IG321,IG331,IG401,IG411,IG421,IG431,IG441,IG501,IG511
    global IG521,IG531,IG541,IG551,IT1,EX11,ETA
    global ISP,XF1,XF2,XF3,XF4,XF5,ETAM,LT1,LT2,ILT,ISPC,ILTC,SDP,ISDP,IXL1,IXL2,IXL3,IXL4,IXL5
    global EX12,IG102,IG202,IG212,IG222,IG302,IG312,IG322,IG332,IG402,IG412,IG422,IG432,IG442,IG502,IG512,IG522
    global IG532,IG542,IG552,IT2, DCMPLX,CDEXP,IXL1C,IXL2C,IXL3C,IXL4C,IXL5C,ILTC,JX,ISPC,ISDPC,IXX1C

    ETA=np.pi*RHO/6
    ETAM =1-ETA
    BOT1=ETAM**4
    TOP=1+2*ETA
    TOP1=TOP*TOP
    C1=TOP1/BOT1
    BOT2=4*BOT1
    TOPP=2+ETA
    TOP2=TOPP*TOPP
    C2=-TOP2/BOT2
    C2=6*ETA*C2
    C3=ETA*C1/2
    ETA12=12*ETA
    LT1=1+ETA/2
    LT2=1+2*ETA
    LP=LT1
    XETA=1/(1-ETA)
    ETA3=(1-ETA)**2
    SP1=1
    SP2=4*ETA*XETA
    SP3=6*(ETA*XETA)**2
    SDP1=2
    SDP2=SP2
    STP=2
    FF=(-ETA+3)*ETA+3
    PAR=np.sqrt(1+2*(ETA**2/FF)**2)
    YPLUS=(1+PAR)**(1/3)
    YMINUS=-(-1+PAR)**(1/3)
    #JX=CDEXP(DCMPLX(0,2*np.pi/3))
    cmp = 0.0 + 2*np.pi/3j
    JX=np.exp(cmp)
    PAR=(2*ETA*FF)**(1/3)
    IT1=XETA*(-2*ETA+PAR*(YPLUS+YMINUS))
    IT2=XETA*(-2*ETA+PAR*(YPLUS*JX+YMINUS/JX))
    XF1=3*ETA3
    PAR=ETA3**2/ETA
    XF2=PAR*3/4
    PAR=PAR*ETA3/ETA
    XF3=PAR*3/8
    PAR=PAR*ETA3/ETA
    XF4=PAR*9/32
    #     !%----------------- Variables for First Root -------------------%!
    ILT=LT1*IT1+LT2
    ISDP=SDP1*IT1+SDP2
    ISP=(SP1*IT1+SP2)*IT1+SP3
    EX11=np.exp(-IT1)
    IXL1=(ILT/ISP)**2
    IXL2=15*ISDP**2-4*ISP*STP
    IXL3=ILT+4*IT1*LP
    IXL4=ILT*ISDP/ISP
    IXL5=2*ILT+3*IT1*LP
    IG101=IT1*ILT/XF1/ISP
    IG201=-ILT/XF2/ISP**2
    IG211=ILT*(1-IT1*(2+ISDP/ISP))+2*LP*IT1
    IG221=ILT*IT1
    IG301=ILT/XF3/ISP**3
    IG311=ILT**2*IT1/ISP**2*(3*ISDP**2-ISP*STP)-3*ILT*ISDP/ISP*(ILT+3*IT1*LP)+6*LP*(ILT+LP*IT1)
    IG321=ILT*(6*LP*IT1+ILT*(2-3*ISDP*IT1/ISP))
    IG331=IG221*ILT
    IG401=-ILT/XF4/ISP**4
    IG411=5*IT1*IXL1*ILT/ISP*ISDP*(2*ISP*STP-3*ISDP**2)+IXL1*IXL2*IXL3-24*LP*IXL4*IXL5+12*LP**2*(3*ILT+2*IT1*LP)
    IG421=(IT1*IXL1*IXL2-12*(IXL4*IXL3-LP*IXL5))*ILT
    IG431=(-6*IT1*IXL4+3*IXL3)*ILT**2
    IG441=IG331*ILT

    ISP=ISP*XF1
    ISDP=ISDP*XF1
    STP=STP*XF1
    IXX1=ILT+5*IT1*LP
    IG501=864*ETA**4*ILT/(ISP**5)

    IG511=120*LT1**3*(2*ILT+LT1*IT1)+(10*ILT**2*(6*ILT**2*ISDP*STP+ IT1*ILT**2*STP**2+45*ILT*LT1*ISDP**2+30*IT1*ILT \
        *LT1*ISDP*STP+90*IT1*LT1**2*ISDP**2))/ISP**2-(100*ILT*LT1*(ILT**2*STP+ 6*ILT*LT1*ISDP+6*LT1**2*ISDP*IT1+2*ILT*LT1 \
        *STP*IT1))/ISP-(105*ILT**3*ISDP**2*(ILT*ISDP+ILT*STP*IT1+5*LT1*ISDP*IT1))/ISP**3+(105*ILT**4*ISDP**4*IT1)/ISP**4

    IG521=240*ILT*LT1**2*(ILT+LT1*IT1)-(20*ILT**2*(ILT**2*STP+15*ILT*LT1*ISDP+30*LT1**2*ISDP*IT1+5*ILT*LT1*STP*IT1)) \
        /ISP+(30*ILT**3*ISDP*(3*ILT*ISDP+2*ILT*STP*IT1+15*LT1*ISDP*IT1))/ISP**2-(105*ILT**4*ISDP**3*IT1)/ISP**3

    IG531=5*ILT**2*(24*IT1*LT1**2+12*ILT*LT1)+(45*ILT**4*ISDP**2*IT1- 5*ILT**2*ISP*(6*ILT**2*ISDP+2*ILT**2*STP \
        *IT1+30*ILT*LT1*ISDP*IT1))/ISP**2

    IG541=4*ILT**3*IXX1-10*IT1*ILT**3*IXL4
    IG551=IT1*ILT**4

    ISP=ISP/XF1
    ISDP=ISDP/XF1
    STP=STP/XF1
    #     !%--------------- Variables for Second Root --------------------%!
    ILTC=LT1*IT2+LT2
    ISDPC=SDP1*IT2+SDP2
    ISPC=(SP1*IT2+SP2)*IT2+SP3
    #EX12 = CDEXP((0,0) - IT2)
    cmp = (0 + 0.0j) - IT2
    EX12 = np.exp(cmp)
    IXL1C=(ILTC/ISPC)**2
    IXL2C=15*ISDPC**2-4*ISPC*STP
    IXL3C=ILTC+4*IT2*LP
    IXL4C=ILTC*ISDPC/ISPC
    IXL5C=2*ILTC+3*IT2*LP
    IG102=IT2*ILTC/XF1/ISPC
    IG202=-ILTC/XF2/ISPC**2
    IG212=ILTC*(1-IT2*(2+ISDPC/ISPC))+2*LP*IT2
    IG222=ILTC*IT2
    IG302=ILTC/XF3/ISPC**3
    IG312=ILTC**2*IT2/ISPC**2*(3*ISDPC**2-ISPC*STP)-3*ILTC*ISDPC/ISPC*(ILTC+3*IT2*LP)+6*LP*(ILTC+LP*IT2)
    IG322=ILTC*(6*LP*IT2+ILTC*(2-3*ISDPC*IT2/ISPC))
    IG332=IG222*ILTC
    IG402=-ILTC/XF4/ISPC**4
    IG412=5*IT2*IXL1C*ILTC/ISPC*ISDPC*(2*ISPC*STP-3*ISDPC**2)+IXL1C*IXL2C*IXL3C-24*LP*IXL4C*IXL5C \
        +12*LP**2*(3*ILTC+2*IT2*LP)
    IG422=(IT2*IXL1C*IXL2C-12*(IXL4C*IXL3C-LP*IXL5C))*ILTC
    IG432=(-6*IT2*IXL4C+3*IXL3C)*ILTC**2
    IG442=IG332*ILTC
    #
    ISPC=ISPC*XF1
    ISDPC=ISDPC*XF1
    STP=STP*XF1
    IXX1C=ILTC+5*IT2*LP
    IG502=864*ETA**4*ILTC/ISPC**5
    IG512=120*LT1**3*(2*ILTC+LT1*IT2)+(10*ILTC**2*(6*ILTC**2*ISDPC*STP+IT2*ILTC**2*STP**2+45*ILTC*LT1*ISDPC**2+30 \
         *IT2*ILTC*LT1*ISDPC*STP+90*IT2*LT1**2*ISDPC**2))/ISPC**2-(100*ILTC*LT1*(ILTC**2*STP+6*ILTC*LT1*ISDPC+6*LT1**2*ISDPC \
         *IT2+2*ILTC*LT1*STP*IT2))/ISPC-(105*ILTC**3*ISDPC**2*(ILTC*ISDPC+ILTC*STP*IT2+5*LT1*ISDPC*IT2))/ISPC**3+(105*ILTC**4 \
         *ISDPC**4*IT2)/ISPC**4
    IG522=240*ILTC*LT1**2*(ILTC+LT1*IT2)-(20*ILTC**2*(ILTC**2*STP+15*ILTC*LT1*ISDPC+30*LT1**2*ISDPC*IT2+5*ILTC*LT1*STP \
         *IT2))/ISPC+(30*ILTC**3*ISDPC*(3*ILTC*ISDPC+2*ILTC*STP*IT2+15*LT1*ISDPC*IT2))/ISPC**2-(105*ILTC**4*ISDPC**3*IT2) \
         /ISPC**3
    IG532=5*ILTC**2*(24*IT2*LT1**2+12*ILTC*LT1)+(45*ILTC**4*ISDPC**2*IT2-5*ILTC**2*ISPC*(6*ILTC**2*ISDPC+2*ILTC**2 \
         *STP*IT2+30*ILTC*LT1*ISDPC*IT2))/ISPC**2
    IG542=4*ILTC**3*IXX1C-10*IT2*ILTC**3*IXL4C
    IG552=IT2*ILTC**4
    #
    ISPC=ISPC/XF1
    ISDPC=ISDPC/XF1
    STP=STP/XF1

def GRPRLD(RHO,R):
    global C1, C2, C3
    global IG102,IG202,IG212,IG222,IG302,IG312,IG322,IG332 ,IG402,IG412,IG422,IG432,IG442,IG502,IG512,IG522,IG532,IG542
    global IG552,IT2,EX12,IG101,IG201,IG211,IG221,IG301,IG311,IG321,IG331,IG401,IG411,IG421,IG431,IG441,IG501,IG511
    global IG521,IG531,IG541,IG551,IT1,EX11,ETA
    global ISP,XF1,XF2,XF3,XF4,XF5,ETAM,LT1,LT2,ILT,ISPC,ILTC,SDP,ISDP,IXL1,IXL2,IXL3,IXL4,IXL5
    global EX12,IG102,IG202,IG212,IG222,IG302,IG312,IG322,IG332,IG402,IG412,IG422,IG432,IG442,IG502,IG512,IG522
    global IG532,IG542,IG552,IT2, DCMPLX,CDEXP,IXL1C,IXL2C,IXL3C,IXL4C,IXL5C,ILTC,JX,ISPC,ISDPC,IXX1C
    global DEC1,DEC2,DEC3

    global DF1DE, DIF1DE, DTE, DITE, DF2DE, DIF2DE, DF3DE, DIF3DE, DF4DE, DIF4DE, DF5DE, DIF5DE
    """
    C
    C     !%------------------------DERIVATIVES---------------------------%!
    C      Derivatives of Y(R) for R<=1
    """
    DTER=(1-ETA)**5
    DEC1=(4*(1+2*ETA)*(2+ETA))/DTER
    DEC2=-(3*(2+ETA)*(ETA*ETA+9*ETA+2))/(2*DTER)
    DEC3=(1+2*ETA)*(2*ETA*ETA+9*ETA+1)/(2*DTER)
    """
    C     !%--------------------------------------------------------------%!
    C     Derivatives of the GR(R) shells with respect to ETA for R >=1
    C     Note: in subroutine GRPRLM ISP = 3(1-ETA)^2*S1, whereas in 
    C     subroutine GRPRLD,DSP = S1,The "D" represents S1 being used for 
    C     the derivs
    """
    DSP=ISP*XF1
    DSDE=-2*ETAM*IT1**3+6*IT1**2*(1-2*ETA)+36*ETA*IT1-48*ETA-12
    DTE=-(DSDE/DSP)
    #C     Derivatives of S1:
    DS1=36*ETA-12*ETA*IT1+3*IT1**2*(2*ETA-2)-12*IT1*(ETA-1)
    DS1DT=6*IT1*(ETA-1)**2+12*ETA*(1-ETA)
    DS1DE=DS1+DS1DT*DTE
    #C     Derivatives of S2:
    DS2=6*(2*ETA-2)*IT1-12*(2*ETA-1)
    DS2DT=6*(1-ETA)**2
    DS2DE=DS2+6*(ETA-1)**2*DTE
    #C     Derivative of S3
    DS3DE=12*(ETA-1)
    #C     Derivative of L with respect to density (ETA) and dL1/dETA
    DLDE=IT1/2+DTE*LT1+2
    DL1DE=1/2
    #C     Derivatives of the function f1 ("0" = zero, not "oh")
    DA0DT=ILT/DSP
    DA0=IT1/DSP*DLDE-IT1*ILT/(DSP**2)*DS1DE
    DF1DE=DA0+DA0DT*DTE
    #C     Derivatives of the function f2
    DB0DE=12/(DSP**2)*(-ILT-ETA*DLDE+2*ETA*ILT*DS1DE/DSP)
    DB1=DLDE*(1-IT1*DS1DT/DSP)+IT1*ILT/DSP*(-DS2DE+DS1DE*DS1DT/DSP)+2*IT1*DL1DE
    DB1DT=-DS1DT*ILT/DSP+2*LT1
    DB1DE=DB1+DB1DT*DTE
    DB2=IT1*DLDE
    DB2DE=DB2+ILT*DTE
    DF2DE=DB0DE*(IG211+IG221*(R))+IG201*(DB1DE+DB2DE*(R-2))
    """
    C
    C     Derivatives of the function f3
    C
    """
    DA1DE=2*ILT*DLDE/(DSP**2)-(2*(ILT**2)*DS1DE)/(DSP**3)
    DC0DE=72*ETA/(DSP**3)*(2*ILT+ETA*DLDE-3*ETA*ILT*DS1DE/DSP)
    A1CONV=9*(1-ETA)**4
    SINV=1/DSP
    DC11=6*DL1DE*(ILT+IT1*LT1)+6*LT1*(DLDE+IT1*DL1DE)-SINV*(3*ILT*DS2DE*(ILT+3*IT1*LT1))-SINV*(3*DS1DT*DLDE*(ILT+3*IT1 \
        *LT1))-SINV*(3*ILT*DS1DT*(DLDE+3*IT1*DL1DE))-SINV**2*(IT1*ILT**2*(DSP*DS3DE-6*DS1DT*DS2DE+DS2DT*DS1DE))-SINV**2*(2*IT1*ILT \
        *DLDE*(DSP*DS2DT-3*DS1DT**2))+SINV**2*(3*ILT*DS1DT*DS1DE*(ILT+3*IT1*LT1))+SINV**3*(2*IT1*ILT**2*DS1DE*(DSP*DS2DT-3 \
        *DS1DT**2))
    DC1DT=6*LT1**2-SINV**2*(ILT**2*(DSP*DS2DT-3*DS1DT**2))-9*ILT*LT1*DS1DT/DSP
    DC1DE=DC11+DC1DT*DTE
    DC2=DLDE*(6*IT1*LT1-ILT*((3*IT1*DS1DT)/DSP-2))-ILT*(ILT*((3*IT1*DS2DE)/DSP-(3*IT1*DS1DT*DS1DE)/DSP**2)-6*IT1* \
    DL1DE+DLDE*((3*IT1*DS1DT)/DSP-2))
    DC2DT=ILT*(6*LT1-3*ILT*DS1DT/DSP)
    DC2DE=DC2+DC2DT*DTE
    DC3=2*IT1*ILT*DLDE
    DC3DT=ILT**2
    DC3DE=DC3+DC3DT*DTE
    DF3DE=DC0DE*(IG311+IG321*(R-3)+IG331*(R-3)**2)+IG301*(DC1DE+DC2DE*(R-3)+DC3DE*(R-3)**2)
    """      
    C
    C     Derivative of the function f4
    C
    """
    A1=(ILT/DSP)**2
    A2=15*DS1DT**2-4*DSP*DS2DT
    A3=ILT+4*IT1*LT1
    A4=ILT*DS1DT/DSP
    A5=2*ILT+3*IT1*LT1
    A6=ILT+5*LT1*IT1;
    A7=ILT+2*LT1*IT1;
    A8=ILT*DS2DT+15*LT1*DS1DT;
    A9=ILT+LT1*IT1;
    A10=ILT*DS2DT+6*LT1*DS1DT;
    A11=2*ILT*DS2DT+15*LT1*DS1DT;
    A12=2*ILT+LT1*IT1;
    A13=ILT*DS2DT+3*LT1*DS1DT;
    A14=ILT*DS2DT+5*LT1*DS1DT;
    DA1=2*ILT*DLDE/DSP**2-2*ILT**2*DS1DE/DSP**3
    DA2=30*DS1DT*DS2DE-4*DSP*DS3DE-4*DS2DT*DS1DE
    DA3=DLDE+4*IT1*DL1DE+4*LT1*DTE
    DA4=ILT*DS2DE/DSP+DS1DT*DLDE/DSP-ILT*DS1DT*DS1DE/DSP**2
    DA5=2*DLDE+3*IT1*DL1DE+3*LT1*DTE
    DA6=DLDE+5*IT1*DL1DE +5*LT1*DTE
    #C      DA6dt(ETA) =5*L1(ETA)
    DA7=DLDE+2*IT1*DL1DE+2*LT1*DTE
    #C      DA7dt(ETA) =2*L1(ETA)
    DA8=ILT*DS3DE+15*LT1*DS2DE+15*DS1DT*DL1DE+DS2DT*DLDE
    DA9=DLDE+IT1*DL1DE+LT1*DTE
    #C      DA9dt(ETA) =L1(ETA)
    DA10=ILT*DS3DE+6*LT1*DS2DE+6*DS1DT*DL1DE+DS2DT*DLDE
    DA11=2*ILT*DS3DE+15*LT1*DS2DE+15*DS1DT*DL1DE+2*DS2DT*DLDE  # possible 1 missing 1*DLDE
    DA12=2*DLDE+IT1*DLDE+LT1*DTE
    #C     DA12dt(ETA) =L1(ETA)
    DA13=ILT*DS3DE+3*LT1*DS2DE+3*DS1DT*DL1DE+DS2DT*DLDE
    DA14=ILT*DS3DE+5*LT1*DS2DE+5*DS1DT*DL1DE+DS2DT*DLDE
    #C
    DD0DE=1152*ETA**3*ILT*DS1DE/DSP**5-288*ETA**3*DLDE/DSP**4-864*ETA**2*ILT/DSP**4  # possible missing 1 at start
    DD1=12*LT1**2*(3*DLDE+2*IT1*DL1DE)+A1*A2*DA3+A1*A3*DA2+A2*A3*DA1-24*A4*A5*DL1DE-24*A4*LT1*DA5-24*A5*LT1*DA4+24 \
        *LT1*DL1DE*(3*ILT+2*IT1*LT1)+(5*IT1*ILT**3*DS1DT*(2*DSP*DS3DE-6*DS1DT*DS2DE+2*DS2DT*DS1DE))/DSP**3+(5*IT1 \
        *ILT**3*DS2DE*(2*DSP*DS2DT-3*DS1DT**2))/DSP**3+(15*IT1*ILT**2*DS1DT*DLDE*(2*DSP*DS2DT-3*DS1DT**2))/DSP**3-(15 \
        *IT1*ILT**3*DS1DT*DS1DE*(2*DSP*DS2DT-3*DS1DT**2))/DSP**4
    #C
    DD1DT=24*LT1**3+(5*ILT**3*DS1DT*(2*DSP*DS2DT-3*DS1DT**2))/DSP**3
    DD1DE=DD1+DD1DT*DTE
    DD2=DLDE*(12*A5*LT1-12*A3*A4+IT1*A1*A2)+ILT*(12*A5*DL1DE-12*A4*DA3-12*A3*DA4+12*LT1*DA5+IT1*A1*DA2+IT1*A2*DA1)
    #C
    DD2DT=A1*A2*ILT
    DD2DE=DD2+DD2DT*DTE
    DD3=ILT**2*(3*DA3-6*IT1*DA4)+2*ILT*DLDE*(3*A3-6*IT1*A4)
    DD3DT=-6*A4*ILT**2
    DD3DE=DD3+DD3DT*DTE
    DD4=3*IT1*ILT**2*DLDE
    DD4DT=ILT**3
    DD4DE=DD4+DD4DT*DTE
    #C
    DF4DE=DD0DE*(IG411+IG421*(R-4)+IG431*(R-4)**2+IG441*(R-4)**3)+IG401*(DD1DE+DD2DE*(R-4)+DD3DE*(R-4)**2+DD4DE*(R-4)**3)
    """
    C
    C     Derivative of function f5
    C 
    """
    DE0DE=(3456*ETA**3*ILT)/DSP**5+(864*ETA**4*DLDE)/DSP**5-(4320*ETA**4*ILT*DS1DE)/DSP**6
    #C
    DE1A=120*LT1**3*(2*DLDE+IT1*DL1DE)+(10*ILT**2*(45*ILT*DS1DT**2*DL1DE+45*LT1*DS1DT**2*DLDE+6*ILT**2*DS1DT*DS3DE+ \
        6*ILT**2*DS2DT*DS2DE+2*IT1*ILT*DS2DT**2*DLDE+180*IT1*LT1*DS1DT**2*DL1DE+180*IT1*LT1**2*DS1DT*DS2DE+2*IT1*ILT**2 \
        *DS2DT*DS3DE+90*ILT*LT1*DS1DT*DS2DE+12*ILT*DS1DT*DS2DT*DLDE+30*IT1*ILT*LT1*DS1DT*DS3DE+30*IT1*ILT*LT1*DS2DT*DS2DE+30 \
        *IT1*ILT*DS1DT*DS2DT*DL1DE+30*IT1*LT1*DS1DT*DS2DT*DLDE))/DSP**2
    #C
    DE1B=360*LT1**2*DL1DE*(2*ILT+IT1*LT1)-(100*ILT*DL1DE*(ILT**2*DS2DT+6*ILT*LT1*DS1DT+6*IT1*LT1**2*DS1DT+2*IT1*ILT \
        *LT1*DS2DT))/DSP-(100*LT1*DLDE*(ILT**2*DS2DT+6*ILT*LT1*DS1DT+6*IT1*LT1**2*DS1DT+2*IT1*ILT*LT1*DS2DT))/DSP-(20*ILT**2 \
        *DS1DE*(45*ILT*LT1*DS1DT**2+6*ILT**2*DS1DT*DS2DT+IT1*ILT**2*DS2DT**2+90*IT1*LT1**2*DS1DT**2+30*IT1*ILT*LT1*DS1DT*DS2DT)) \
        /DSP**3-(105*ILT**3*DS1DT**2*(ILT*DS2DE+DS1DT*DLDE+IT1*ILT*DS3DE+5*IT1*LT1*DS2DE+5*IT1*DS1DT*DL1DE+IT1*DS2DT*DLDE))/DSP**3
    #C
    DE1C=-(100*ILT*LT1*(ILT**2*DS3DE+6*ILT*LT1*DS2DE+6*ILT*DS1DT*DL1DE+2*ILT*DS2DT*DLDE+6*LT1*DS1DT*DLDE+6*IT1*LT1 \
        **2*DS2DE+2*IT1*ILT*LT1*DS3DE+2*IT1*ILT*DS2DT*DL1DE+12*IT1*LT1*DS1DT*DL1DE+2*IT1*LT1*DS2DT*DLDE))/DSP+(20*ILT*DLDE \
        *(45*ILT*LT1*DS1DT**2+6*ILT**2*DS1DT*DS2DT+IT1*ILT**2*DS2DT**2+90*IT1*LT1**2*DS1DT**2+30*IT1*ILT*LT1*DS1DT*DS2DT))/DSP \
        **2+(420*IT1*ILT**3*DS1DT**4*DLDE)/DSP**4+(420*IT1*ILT**4*DS1DT**3*DS2DE)/DSP**4
    #C
    DE1D=-(420*IT1*ILT**4*DS1DT**4*DS1DE)/DSP**5-(210*ILT**3*DS1DT*DS2DE*(ILT*DS1DT+IT1*ILT*DS2DT+5*IT1*LT1*DS1DT))/DSP**3+(100 \
        *ILT*LT1*DS1DE*(ILT**2*DS2DT+6*ILT*LT1*DS1DT+6*IT1*LT1**2*DS1DT+2*IT1*ILT*LT1*DS2DT))/DSP**2-(315*ILT**2*DS1DT**2*DLDE \
        *(ILT*DS1DT+IT1*ILT*DS2DT+5*IT1*LT1*DS1DT))/DSP**3+(315*ILT**3*DS1DT**2*DS1DE*(ILT*DS1DT+IT1*ILT*DS2DT+5*IT1*LT1*DS1DT))/DSP**4
    DE1=DE1A+DE1B+DE1C+DE1D
    #C
    DE1DT=120*LT1**4+(105*ILT**4*DS1DT**4)/DSP**4+(10*ILT**2*(ILT**2*DS2DT**2+90*LT1**2*DS1DT**2+30*ILT*LT1*DS1DT*DS2DT)) \
        /DSP**2-(105*ILT**3*DS1DT**2*(ILT*DS2DT+5*LT1*DS1DT))/DSP**3-(100*ILT*LT1*(6*LT1**2*DS1DT+2*ILT*LT1*DS2DT))/DSP
    #C
    DE1DE=DE1+DE1DT*DTE
    DE2A=240*LT1**2*DLDE*(ILT+IT1*LT1)-(20*ILT**2*(ILT**2*DS3DE+15*ILT*LT1*DS2DE+15*ILT*DS1DT*DL1DE+2*ILT*DS2DT*DLDE+15 \
        *LT1*DS1DT*DLDE+30*IT1*LT1**2*DS2DE+5*IT1*ILT*LT1*DS3DE+5*IT1*ILT*DS2DT*DL1DE+60*IT1*LT1*DS1DT*DL1DE+5*IT1*LT1*DS2DT \
        *DLDE))/DSP+240*ILT*LT1**2*(DLDE+IT1*DL1DE)+(30*ILT**3*DS2DE*(3*ILT*DS1DT+2*IT1*ILT*DS2DT+15*IT1*LT1*DS1DT))/DSP \
        **2-(40*ILT*DLDE*(ILT**2*DS2DT+15*ILT*LT1*DS1DT+30*IT1*LT1**2*DS1DT+5*IT1*ILT*LT1*DS2DT))/DSP
    #C
    DE2B=(20*ILT**2*DS1DE*(ILT**2*DS2DT+15*ILT*LT1*DS1DT+30*IT1*LT1**2*DS1DT+5*IT1*ILT*LT1*DS2DT))/DSP**2+480*ILT*LT1 \
        *DL1DE*(ILT+IT1*LT1)+(30*ILT**3*DS1DT*(3*ILT*DS2DE+3*DS1DT*DLDE+2*IT1*ILT*DS3DE+15*IT1*LT1*DS2DE+15*IT1*DS1DT*DL1DE \
        +2*IT1*DS2DT*DLDE))/DSP**2-(420*IT1*ILT**3*DS1DT**3*DLDE)/DSP**3-(315*IT1*ILT**4*DS1DT**2*DS2DE)/DSP**3+(315*IT1*ILT \
        **4*DS1DT**3*DS1DE)/DSP**4+(90*ILT**2*DS1DT*DLDE*(3*ILT*DS1DT+2*IT1*ILT*DS2DT+15*IT1*LT1*DS1DT))/DSP**2
    DE2C=-(60*ILT**3*DS1DT*DS1DE*(3*ILT*DS1DT+2*IT1*ILT*DS2DT+15*IT1*LT1*DS1DT))/DSP**3
    DE2=DE2A+DE2B+DE2C
    #C
    DE2DT=240*ILT*LT1**3-(105*ILT**4*DS1DT**3)/DSP**3-(20*ILT**2*(30*LT1**2*DS1DT+5*ILT*LT1*DS2DT))/DSP+(30*ILT**3 \
        *DS1DT*(2*ILT*DS2DT+15*LT1*DS1DT))/DSP**2
    #C
    DE2DE=DE2+DE2DT*DTE
    DE3A=5*ILT**2*(12*ILT*DL1DE+12*LT1*DLDE+48*IT1*LT1*DL1DE)-(5*ILT**2*DS1DE*(6*ILT**2*DS1DT+2*IT1*ILT**2*DS2DT \
        +30*IT1*ILT*LT1*DS1DT)+5*ILT**2*DSP*(6*ILT**2*DS2DE+12*ILT*DS1DT*DLDE+2*IT1*ILT**2*DS3DE+30*IT1*ILT*LT1*DS2DE+30 \
        *IT1*ILT*DS1DT*DL1DE+4*IT1*ILT*DS2DT*DLDE+30*IT1*LT1*DS1DT*DLDE)-90*IT1*ILT**4*DS1DT*DS2DE-180*IT1*ILT**3*DS1DT**2 \
        *DLDE+10*ILT*DSP*DLDE*(6*ILT**2*DS1DT+2*IT1*ILT**2*DS2DT+30*IT1*ILT*LT1*DS1DT))/DSP**2
    DE3B=(2*DS1DE*(5*ILT**2*DSP*(6*ILT**2*DS1DT+2*IT1*ILT**2*DS2DT+30*IT1*ILT*LT1*DS1DT)-45*IT1*ILT**4*DS1DT**2))/DSP \
        **3+10*ILT*DLDE*(12*ILT*LT1+24*IT1*LT1**2)
    DE3=DE3A+DE3B
    #C
    DE3DT=120*ILT**2*LT1**2+(45*ILT**4*DS1DT**2-5*ILT**2*DSP*(2*ILT**2*DS2DT+30*ILT*LT1*DS1DT))/DSP**2
    #C
    DE3DE=DE3+DE3DT*DTE
    DE4=4*ILT**3*(DLDE+5*IT1*DL1DE)+12*ILT**2*DLDE*(ILT+5*IT1*LT1)-(10*IT1*ILT**4*DS2DE)/ \
      DSP-(40*IT1*ILT**3*DS1DT*DLDE)/DSP+(10*IT1*ILT**4*DS1DT*DS1DE)/DSP**2
    #C
    DE4DT=20*ILT**3*LT1-(10*ILT**4*DS1DT)/DSP
    DE4DE=DE4+DE4DT*DTE
    DE5=4*IT1*ILT**3*DLDE
    DE5DT=ILT**4
    DE5DE=DE5+DE5DT*DTE
    #C
    DF5DE=DE0DE*(IG511+IG521*(R-5)+IG531*(R-5)**2+IG541*(R-5)**3+IG551*(R-5)**4)+IG501* \
        (DE1DE+DE2DE*(R-5)+DE3DE*(R-5)**2+DE4DE*(R-5)**3+DE5DE*(R-5)**4)
    """
    C
    C     !%-------------------------SECOND ROOT--------------------------%!
    C     Derivatives of the GR(R) shells with respect to ETA for R >=1
    C     Note: in subroutine GRPRLM ISP = 3(1-ETA)^2*S1, whereas in 
    C     subroutine GRPRLD,DSP = S1,The "D" represents S1 being used for 
    C     the derivs
    C     The following derivatives are simiar to the above derivatives but 
    C     in this case the second root of ti (IT2) is used throughout.
    C     Note: in subroutine GRPRLM ISPC = 2(1-ETA)^2*S1, whereas in
    C     subroutine GRPRLD,DISP = S1 (evaluated at IT2).
    """
    DISP= XF1*ISPC
    DISDE=-2*ETAM*IT2**3+6*IT2**2*(1-2*ETA)+36*ETA*IT2-48*ETA-12
    #C     The following DITE is used frequently and is the derivative of the
    #C     complex root ti (IT2) with respect to density (Eta)
    DITE=-(DISDE/DISP)
    DIS1=36*ETA-12*ETA*IT2+3*IT2**2*(2*ETA-2)-12*IT2*(ETA-1)
    DIS1DT=6*IT2*(ETA-1)**2+12*ETA*ETAM
    DIS1DE=DIS1+DIS1DT*DITE
    #C     Derivatives of S2:
    DIS2=6*(2*ETA-2)*IT2-12*(2*ETA-1)
    DIS2DT=6*(1-ETA)**2
    DIS2DE=DIS2+6*(ETA-1)**2*DITE
    #C     Derivative of S3
    DIS3DE=12*(ETA-1)
    #C     Derivative of L with respect to density (ETA) and dL1/dETA
    DILDE=IT2/2+DITE*LT1+2
    DIL1DE=1/2
    #C     Derivatives of the function f1 ("0" = zero, not "oh")
    DIA0DT=ILTC/DISP
    DIA0=IT2/DISP*DILDE-IT2*ILTC/(DISP**2)*DIS1DE
    DIF1DE=DIA0+DIA0DT*DITE
    #C     Derivatives of the function f2
    DIB0DE=12/(DISP**2)*(-ILTC-ETA*DILDE+2*ETA*ILTC*DIS1DE/(DISP))
    DIB1=DILDE*(1-IT2*DIS1DT/DISP)+IT2*ILTC/DISP*(-DIS2DE+DIS1DE*DIS1DT/DISP)+2*IT2*DL1DE
    DIB1DT=-DIS1DT*ILTC/DISP+2*LT1
    DIB1DE=DIB1+DIB1DT*DITE
    DIB2=IT2*DILDE
    DIB2DE=DIB2+ILTC*DITE
    DIF2DE=DIB0DE*(IG212+IG222*(R))+IG202*(DIB1DE+DIB2DE*(R-2))
    #C     Derivatives of the function f3
    DIA1DE=2*ILTC*DILDE/DISP**2-(2*ILTC**2*DIS1DE)/DISP**3
    #C
    DIC0DE=72*ETA/(DISP**3)*(2*ILTC+ETA*DILDE-3*ETA*ILTC*DIS1DE/DISP)
    SIINV=1/DISP
    DC12=6*DL1DE*(ILTC+IT2*LT1)+6*LT1*(DILDE+IT2*DL1DE)-SIINV*(3*ILTC*DIS2DE*(ILTC+3*IT2*LT1))-SIINV*(3*DIS1DT*DILDE \
        *(ILTC+3*IT2*LT1))-SIINV*(3*ILTC*DIS1DT*(DILDE+3*IT2*DL1DE))-SIINV**2*(IT2*ILTC**2*(DISP*DIS3DE-6*DIS1DT*DIS2DE \
        +DIS2DT*DIS1DE))-SIINV**2*(2*IT2*ILTC*DILDE*(DISP*DIS2DT-3*DIS1DT**2))+SIINV**2*(3*ILTC*DIS1DT*DIS1DE*(ILTC+3*IT2*LT1)) \
        +SIINV**3*(2*IT2*ILTC**2*DIS1DE*(DISP*DIS2DT-3*DIS1DT**2))
    #C
    DIC1DT=6*LT1**2-SIINV**2*(ILTC**2*(DISP*DIS2DT-3*DIS1DT**2))-9*ILTC*LT1*DIS1DT/DISP
    DIC1DE=DC12+DIC1DT*DITE
    DIC2=DILDE*(6*IT2*LT1-ILTC*((3*IT2*DIS1DT)/DISP-2))-ILTC*(ILTC*((3*IT2*DIS2DE)/DISP-(3*IT2*DIS1DT*DIS1DE)/DISP**2) \
        -6*IT2*DIL1DE+DILDE*((3*IT2*DIS1DT)/DISP-2))
    DIC2DT=ILTC*(6*LT1-3*ILTC*DIS1DT/DISP)
    DIC2DE=DIC2+DIC2DT*DITE
    DIC3=2*IT2*ILTC*DILDE
    DIC3DT=ILTC**2
    DIC3DE=DIC3+DIC3DT*DITE
    DIF3DE=DIC0DE*(IG312+IG322*(R-3)+IG332*(R-3)**2)+IG302*(DIC1DE+DIC2DE*(R-3)+DIC3DE*(R-3)**2)
    """
    C
    C    Derivatives of function f4
    C
    """
    AI1=(ILTC/DISP)**2
    AI2=15*DIS1DT**2-4*DISP*DIS2DT
    AI3=ILTC+4*IT2*LT1
    AI4=ILTC*DIS1DT/DISP
    AI5=2*ILTC+3*IT2*LT1
    DAI1=2*ILTC*DILDE/DISP**2-2*ILTC**2*DIS1DE/DISP**3
    DAI2=30*DIS1DT*DIS2DE-4*DISP*DIS3DE-4*DIS2DT*DIS1DE
    DAI3=DILDE+4*IT2*DIL1DE+4*LT1*DITE
    DAI4=ILTC*DIS2DE/DISP+DIS1DT*DILDE/DISP-ILTC*DIS1DT*DIS1DE/DISP**2
    DAI5=2*DILDE+3*IT2*DIL1DE+3*LT1*DITE
    #C

    DID0DE=1152*ETA**3*ILTC*DIS1DE/DISP**5-288*ETA**3*DILDE/DISP**4-864*ETA**2*ILTC/DISP**4
    DID1=12*LT1**2*(3*DILDE+2*IT2*DIL1DE)+AI1*AI2*DAI3+AI1*AI3*DAI2+AI2*AI3*DAI1-24*AI4*AI5*DIL1DE-24*AI4*LT1*DAI5- \
        24*AI5*LT1*DAI4+24*LT1*DIL1DE*(3*ILTC+2*IT2*LT1)+(5*IT2*ILTC**3*DIS1DT*(2*DISP*DIS3DE-6*DIS1DT*DIS2DE+2*DIS2DT \
        *DIS1DE))/DISP**3+(5*IT2*ILTC**3*DIS2DE*(2*DISP*DIS2DT-3*DIS1DT**2))/DISP**3+(15*IT2*ILTC**2*DIS1DT*DILDE*(2 \
        *DISP*DIS2DT-3*DIS1DT**2))/DISP**3-(15*IT2*ILTC**3*DIS1DT*DIS1DE*(2*DISP*DIS2DT-3*DIS1DT**2))/DISP**4
    #C
    DID1DT=24*LT1**3+(5*ILTC**3*DIS1DT*(2*DISP*DIS2DT-3*DIS1DT**2))/DISP**3
    DID1DE=DID1+DID1DT*DITE
    #C
    DID2=DILDE*(12*AI5*LT1-12*AI3*AI4+IT2*AI1*AI2)+ILTC*(12*AI5*DIL1DE-12*AI4*DAI3-12*AI3*DAI4+12*LT1*DAI5+IT2*AI1* \
    DAI2+IT2*AI2*DAI1)
    #C
    DID2DT=AI1*AI2*ILTC
    DID2DE=DID2+DID2DT*DITE
    DID3=ILTC**2*(3*DAI3-6*IT2*DAI4)+2*ILTC*DILDE*(3*AI3-6*IT2*AI4)
    DID3DT=-6*AI4*ILTC**2
    DID3DE=DID3+DID3DT*DITE
    DID4=3*IT2*ILTC**2*DILDE
    DID4DT=ILTC**3
    DID4DE=DID4+DID4DT*DITE
    #C
    DIF4DE=DID0DE*(IG412+IG422*(R-4)+IG432*(R-4)**2+IG442*(R-4)**3)+IG402*(DID1DE+DID2DE*(R-4)+DID3DE*(R-4)**2+DID4DE \
        *(R-4)**3)
    #C
    #C     Derivative of function f5
    #C
    DIE0DE=(3456*ETA**3*ILTC)/DISP**5+(864*ETA**4*DILDE)/DISP**5-(4320*ETA**4*ILTC*DIS1DE)/DISP**6
    #C
    DIE1a=120*LT1**3*(2*DILDE+IT2*DIL1DE)+(10*ILTC**2*(45*ILTC*DIS1DT**2*DIL1DE+45*LT1*DIS1DT**2*DILDE+6*ILTC**2*DIS1DT \
    *DIS3DE+6*ILTC**2*DIS2DT*DIS2DE+2*IT2*ILTC*DIS2DT**2*DILDE+180*IT2*LT1*DIS1DT**2*DIL1DE+180*IT2*LT1**2*DIS1DT*DIS2DE \
    +2*IT2*ILTC**2*DIS2DT*DIS3DE+90*ILTC*LT1*DIS1DT*DIS2DE+12*ILTC*DIS1DT*DIS2DT*DILDE+30*IT2*ILTC*LT1*DIS1DT*DIS3DE \
    +30*IT2*ILTC*LT1*DIS2DT*DIS2DE+30*IT2*ILTC*DIS1DT*DIS2DT*DIL1DE+30*IT2*LT1*DIS1DT*DIS2DT*DILDE))/DISP**2
    #C
    DIE1b=360*LT1**2*DIL1DE*(2*ILTC+IT2*LT1)-(100*ILTC*DIL1DE*(ILTC**2*DIS2DT+6*ILTC*LT1*DIS1DT+6*IT2*LT1**2*DIS1DT+2 \
    *IT2*ILTC*LT1*DIS2DT))/DISP-(100*LT1*DILDE*(ILTC**2*DIS2DT+6*ILTC*LT1*DIS1DT+6*IT2*LT1**2*DIS1DT+2*IT2*ILTC*LT1*DIS2DT)) \
    /DISP-(20*ILTC**2*DIS1DE*(45*ILTC*LT1*DIS1DT**2+6*ILTC**2*DIS1DT*DIS2DT+IT2*ILTC**2*DIS2DT**2+90*IT2*LT1**2*DIS1DT**2 \
    +30*IT2*ILTC*LT1*DIS1DT*DIS2DT))/DISP**3-(105*ILTC**3*DIS1DT**2*(ILTC*DIS2DE+DIS1DT*DILDE+IT2*ILTC*DIS3DE+5*IT2*LT1*DIS2DE \
    +5*IT2*DIS1DT*DIL1DE+IT2*DIS2DT*DILDE))/DISP**3
    #C
    DIE1c=-(100*ILTC*LT1*(ILTC**2*DIS3DE+6*ILTC*LT1*DIS2DE+6*ILTC*DIS1DT*DIL1DE+2*ILTC*DIS2DT*DILDE+6*LT1*DIS1DT*DILDE \
    +6*IT2*LT1**2*DIS2DE+2*IT2*ILTC*LT1*DIS3DE+2*IT2*ILTC*DIS2DT*DIL1DE+12*IT2*LT1*DIS1DT*DIL1DE+2*IT2*LT1*DIS2DT*DILDE)) \
    /DISP+(20*ILTC*DILDE*(45*ILTC*LT1*DIS1DT**2+6*ILTC**2*DIS1DT*DIS2DT+IT2*ILTC**2*DIS2DT**2+90*IT2*LT1**2*DIS1DT**2+30 \
    *IT2*ILTC*LT1*DIS1DT*DIS2DT))/DISP**2+(420*IT2*ILTC**3*DIS1DT**4*DILDE)/DISP**4+(420*IT2*ILTC**4*DIS1DT**3*DIS2DE)/DISP**4
    #C
    DIE1d=-(420*IT2*ILTC**4*DIS1DT**4*DIS1DE)/DISP**5-(210*ILTC**3*DIS1DT*DIS2DE*(ILTC*DIS1DT+IT2*ILTC*DIS2DT+5*IT2*LT1*DIS1DT \
    ))/DISP**3+(100*ILTC*LT1*DIS1DE*(ILTC**2*DIS2DT+6*ILTC*LT1*DIS1DT+6*IT2*LT1**2*DIS1DT+2*IT2*ILTC*LT1*DIS2DT))/DISP**2 \
    -(315*ILTC**2*DIS1DT**2*DILDE*(ILTC*DIS1DT+IT2*ILTC*DIS2DT+5*IT2*LT1*DIS1DT))/DISP**3+(315*ILTC**3*DIS1DT**2*DIS1DE*(ILTC \
    *DIS1DT+IT2*ILTC*DIS2DT+5*IT2*LT1*DIS1DT))/DISP**4
    DIE1=DIE1a+DIE1b+DIE1c+DIE1d
    #C
    DIE1DT=120*LT1**4+(105*ILTC**4*DIS1DT**4)/DISP**4+(10*ILTC**2*(ILTC**2*DIS2DT**2+90*LT1**2*DIS1DT**2+30*ILTC*LT1*DIS1DT \
    *DIS2DT))/DISP**2-(105*ILTC**3*DIS1DT**2*(ILTC*DIS2DT+5*LT1*DIS1DT))/DISP**3-(100*ILTC*LT1*(6*LT1**2*DIS1DT+2*ILTC \
    *LT1*DIS2DT))/DISP
    DIE1DE=DIE1+DIE1DT*DITE
    #C
    DIE2a=240*LT1**2*DILDE*(ILTC+IT2*LT1)-(20*ILTC**2*(ILTC**2*DIS3DE+15*ILTC*LT1*DIS2DE+15*ILTC*DIS1DT*DIL1DE+2*ILTC \
    *DIS2DT*DILDE+15*LT1*DIS1DT*DILDE+30*IT2*LT1**2*DIS2DE+5*IT2*ILTC*LT1*DIS3DE+5*IT2*ILTC*DIS2DT*DIL1DE+60*IT2*LT1*DIS1DT \
    *DIL1DE+5*IT2*LT1*DIS2DT*DILDE))/DISP+240*ILTC*LT1**2*(DILDE+IT2*DIL1DE)+(30*ILTC**3*DIS2DE*(3*ILTC*DIS1DT+2*IT2*ILTC \
    *DIS2DT+15*IT2*LT1*DIS1DT))/DISP**2
    #C
    DIE2b=-(40*ILTC*DILDE*(ILTC**2*DIS2DT+15*ILTC*LT1*DIS1DT+30*IT2*LT1**2*DIS1DT+5*IT2*ILTC*LT1*DIS2DT))/DISP+(20*ILTC \
    **2*DIS1DE*(ILTC**2*DIS2DT+15*ILTC*LT1*DIS1DT+30*IT2*LT1**2*DIS1DT+5*IT2*ILTC*LT1*DIS2DT))/DISP**2+480*ILTC*LT1*DIL1DE \
    *(ILTC+IT2*LT1)+(30*ILTC**3*DIS1DT*(3*ILTC*DIS2DE+3*DIS1DT*DILDE+2*IT2*ILTC*DIS3DE+15*IT2*LT1*DIS2DE+15*IT2* \
    DIS1DT*DIL1DE+2*IT2*DIS2DT*DILDE))/DISP**2-(420*IT2*ILTC**3*DIS1DT**3*DILDE)/DISP**3-(315*IT2*ILTC**4*DIS1DT**2*DIS2DE)/DISP**3
    #C
    DIE2c=(315*IT2*ILTC**4*DIS1DT**3*DIS1DE)/DISP**4+(90*ILTC**2*DIS1DT*DILDE*(3*ILTC*DIS1DT+2*IT2*ILTC*DIS2DT+15*IT2*LT1 \
    *DIS1DT))/DISP**2-(60*ILTC**3*DIS1DT*DIS1DE*(3*ILTC*DIS1DT+2*IT2*ILTC*DIS2DT+15*IT2*LT1*DIS1DT))/DISP**3
    DIE2=DIE2a+DIE2b+DIE2c
    #C
    DIE2DT=240*ILTC*LT1**3-(105*ILTC**4*DIS1DT**3)/DISP**3-(20*ILTC**2*(30*LT1**2*DIS1DT+5*ILTC*LT1*DIS2DT))/DISP+(30 \
    *ILTC**3*DIS1DT*(2*ILTC*DIS2DT+15*LT1*DIS1DT))/DISP**2
    DIE2DE=DIE2+DIE2DT*DITE
    #C
    DIE3a=5*ILTC**2*(12*ILTC*DIL1DE+12*LT1*DILDE+48*IT2*LT1*DIL1DE)-(5*ILTC**2*DIS1DE*(6*ILTC**2*DIS1DT+2*IT2*ILTC \
    **2*DIS2DT+30*IT2*ILTC*LT1*DIS1DT)+5*ILTC**2*DISP*(6*ILTC**2*DIS2DE+12*ILTC*DIS1DT*DILDE+2*IT2*ILTC**2*DIS3DE+30 \
    *IT2*ILTC*LT1*DIS2DE+30*IT2*ILTC*DIS1DT*DIL1DE+4*IT2*ILTC*DIS2DT*DILDE+30*IT2*LT1*DIS1DT*DILDE)-90*IT2*ILTC**4*DIS1DT*DIS2DE \
    -180*IT2*ILTC**3*DIS1DT**2*DILDE+10*ILTC*DISP*DILDE*(6*ILTC**2*DIS1DT+2*IT2*ILTC**2*DIS2DT+30*IT2*ILTC*LT1 \
    *DIS1DT))/DISP**2
    #
    DIE3b=(2*DIS1DE*(5*ILTC**2*DISP*(6*ILTC**2*DIS1DT+2*IT2*ILTC**2*DIS2DT+30*IT2*ILTC*LT1*DIS1DT)-45*IT2*ILTC**4 \
        *DIS1DT**2))/DISP**3+10*ILTC*DILDE*(12*ILTC*LT1+24*IT2*LT1**2)
    DIE3=DIE3a+DIE3b
    #C
    DIE3DT=120*ILTC**2*LT1**2+(45*ILTC**4*DIS1DT**2-5*ILTC**2*DISP*(2*ILTC**2*DIS2DT+30*ILTC*LT1*DIS1DT))/DISP**2
    DIE3DE=DIE3+DIE3DT*DITE
    #C
    DIE4=4*ILTC**3*(DILDE+5*IT2*DIL1DE)+12*ILTC**2*DILDE*(ILTC+5*IT2*LT1)-(10*IT2*ILTC**4*DIS2DE)/DISP-(40*IT2*ILTC**3 \
    *DIS1DT*DILDE)/DISP+(10*IT2*ILTC**4*DIS1DT*DIS1DE)/DISP**2
    DIE4DT=20*ILTC**3*LT1-(10*ILTC**4*DIS1DT)/DISP
    DIE4DE=DIE4+DIE4DT*DITE
    #C
    DIE5=4*IT2*ILTC**3*DILDE
    DIE5DT=ILTC**4
    DIE5DE=DIE5+DIE5DT*DITE
    #C
    DIF5DE=DIE0DE*(IG512+IG522*(R-5)+IG532*(R-5)**2+IG542*(R-5)**3+IG552*(R-5)**4)+IG502*(DIE1DE+DIE2DE*(R-5)+DIE3DE \
    *(R-5)**2+DIE4DE*(R-5)**3+DIE5DE*(R-5)**4)

    ################# END OF FUNCTION ########################


def GR(R1):
    """
    C
    C     !%--------------------------------------------------------------%!
    C
    C     ORIGINALLY CALCULATED R TIMES RADIAL DISTRIBUTION FUNCTION SO I
    C     DIVIDED BY R TO GIVE Y(R)=G(R) FOR R>D AND HAVE ADDED Y(R) FOR
    C     R<D.  IF YOU WANT ONLY G(R) THEN IGNORE R<D.


    """
    global C1, C2, C3
    global IG102, IG202, IG212, IG222, IG302, IG312, IG322, IG332, IG402, IG412, IG422, IG432, IG442, IG502, IG512, IG522, IG532, IG542
    global IG552, IT2, EX12, IG101, IG201, IG211, IG221, IG301, IG311, IG321, IG331, IG401, IG411, IG421, IG431, IG441, IG501, IG511
    global IG521, IG531, IG541, IG551, IT1, EX11, ETA
    global ISP, XF1, XF2, XF3, XF4, XF5, ETAM, LT1, LT2, ILT, ISPC, ILTC, SDP, ISDP, IXL1, IXL2, IXL3, IXL4, IXL5
    global EX12, IG102, IG202, IG212, IG222, IG302, IG312, IG322, IG332, IG402, IG412, IG422, IG432, IG442, IG502, IG512, IG522
    global IG532, IG542, IG552, IT2, DCMPLX, CDEXP, IXL1C, IXL2C, IXL3C, IXL4C, IXL5C, ILTC, JX, ISPC, ISDPC, IXX1C

    R=R1
    if R >= 1 and R <= 6:
        GR = RRG_Shells(R)

    elif R > 6:
        RHO = ETA*6/np.pi
        A=3.64779052-4.5326958*RHO+2.8254675*RHO**1.5-1.1230973*np.log(RHO)/RHO+0.02371867*np.log(RHO)/RHO**2
        B=7.0399098-13.686034*RHO-0.85088666*RHO**3+2.9323443*np.exp(RHO)+6.6465928*np.sqrt(RHO)*np.log(RHO)
        C=5.9382949+3.7429435*RHO+1.108728*RHO**2*np.log(RHO)-0.96469546*np.exp(RHO)+0.19983335*np.log(RHO)
        D=1.1350252-1.9259676*RHO-1.8835841*RHO**2*np.log(RHO)+1.0381572*RHO**3+0.00007112*np.log(RHO)
        HR=A*np.exp(-B*R)*np.sin(C*R+D)/R
        GR=HR+1

    elif R < 1:
        R3 = R * R * R
        GR = C1 + C2 * R + C3 * R3

    return np.real(GR)




def RRG_Shells(R):
    global C1, C2, C3
    global IG102,IG202,IG212,IG222,IG302,IG312,IG322,IG332 ,IG402,IG412,IG422,IG432,IG442,IG502,IG512,IG522,IG532,IG542
    global IG552,IT2,EX12,IG101,IG201,IG211,IG221,IG301,IG311,IG321,IG331,IG401,IG411,IG421,IG431,IG441,IG501,IG511
    global IG521,IG531,IG541,IG551,IT1,EX11,ETA
    global ISP,XF1,XF2,XF3,XF4,XF5,ETAM,LT1,LT2,ILT,ISPC,ILTC,SDP,ISDP,IXL1,IXL2,IXL3,IXL4,IXL5
    global EX12,IG102,IG202,IG212,IG222,IG302,IG312,IG322,IG332,IG402,IG412,IG422,IG432,IG442,IG502,IG512,IG522
    global IG532,IG542,IG552,IT2, DCMPLX,CDEXP,IXL1C,IXL2C,IXL3C,IXL4C,IXL5C,ILTC,JX,ISPC,ISDPC,IXX1C

    RRG = 0
    EX1 = EX11 * np.exp(R * IT1)
    EX2 = EX12 * np.exp(R * IT2) # complex exponential
    RRG = RRG + IG101 * EX1 + 2 * IG102 * EX2
    if R <= 2:
        return RRG/R
    EX1 = EX1 * EX11
    EX2 = EX2 * EX12
    RRG = RRG + IG201 * EX1 * (IG211 + IG221 * R) + 2 * IG202 * EX2 * (IG212 + IG222 * R)
    if R <= 3:
        return RRG / R
    RX = R - 3
    EX1 = EX1 * EX11
    EX2 = EX2 * EX12
    RRG = RRG + IG301 * EX1 * ((IG331 * RX + IG321) * RX + IG311) + 2 * IG302 * EX2 * ((IG332 * RX + IG322) * RX + IG312)
    if R <= 4:
        return RRG/R
    RX = R - 4
    EX1 = EX1 * EX11
    EX2 = EX2 * EX12
    RRG = RRG + IG401 * EX1 * (((IG441 * RX + IG431) * RX + IG421) * RX + IG411) + 2 * EX2 * IG402 * (
                ((IG442 * RX + IG432) * RX + IG422) * RX + IG412)

    if R <= 5:
        return RRG / R

    RX = R - 5
    EX1 = EX1 * EX11
    EX2 = EX2 * EX12
    RRG = RRG + IG501 * EX1 * ((((IG551 * RX + IG541) * RX + IG531) * RX + IG521) * RX + IG511) + 2 * EX2 * IG502 * (
                (((IG552 * RX + IG542) * RX + IG532) * RX + IG522) * RX + IG512)
    return RRG / R

def DRRG_Shells(R):
    global C1, C2, C3
    global IG102,IG202,IG212,IG222,IG302,IG312,IG322,IG332 ,IG402,IG412,IG422,IG432,IG442,IG502,IG512,IG522,IG532,IG542
    global IG552,IT2,EX12,IG101,IG201,IG211,IG221,IG301,IG311,IG321,IG331,IG401,IG411,IG421,IG431,IG441,IG501,IG511
    global IG521,IG531,IG541,IG551,IT1,EX11,ETA
    global ISP,XF1,XF2,XF3,XF4,XF5,ETAM,LT1,LT2,ILT,ISPC,ILTC,SDP,ISDP,IXL1,IXL2,IXL3,IXL4,IXL5
    global EX12,IG102,IG202,IG212,IG222,IG302,IG312,IG322,IG332,IG402,IG412,IG422,IG432,IG442,IG502,IG512,IG522
    global IG532,IG542,IG552,IT2, DCMPLX,CDEXP,IXL1C,IXL2C,IXL3C,IXL4C,IXL5C,ILTC,JX,ISPC,ISDPC,IXX1C
    global DF1DE,DIF1DE,DTE,DITE,DF2DE,DIF2DE,DF3DE,DIF3DE,DF4DE,DIF4DE,DF5DE,DIF5DE

    DRRG = 0
    EX1 = EX11 * np.exp(R * IT1)
    # EX2=EX12*CDEXP(R*IT2)
    EX2 = EX12 * np.exp(R * IT2)
    FN11 = IG101
    FN12 = IG102
    DRRG = DRRG + EX1 * (DF1DE + (R - 1) * FN11 * DTE) + 2 * EX2 * (DIF1DE + (R - 1) * FN12 * DITE)
    if R <= 2:
        return np.pi*DRRG/(6*R)

    # C         SECOND SHELL CONTRIBUTION

    EX1 = EX1 * EX11
    EX2 = EX2 * EX12
    FN21 = IG201 * (IG211 + IG221 * (R))
    FN22 = IG202 * (IG212 + IG222 * (R))
    DRRG = DRRG + EX1 * (DF2DE + (R - 2) * FN21 * DTE) + 2 * EX2 * (DIF2DE + (R - 2) * FN22 * DITE)
    if R <= 3:
        return np.pi*DRRG/(6*R)

    #         THIRD SHELL CONTRIBUTION

    EX1 = EX1 * EX11
    EX2 = EX2 * EX12
    FN31 = IG301 * (IG311 + IG321 * (R - 3) + IG331 * (R - 3) ** 2)
    FN32 = IG302 * (IG312 + IG322 * (R - 3) + IG332 * (R - 3) ** 2)
    DRRG = DRRG + EX1 * (DF3DE + (R - 3) * FN31 * DTE) + 2 * EX2 * (DIF3DE + (R - 3) * FN32 * DITE)
    if R <= 4:
        return np.pi*DRRG/(6*R)

    # C         FOURTH SHELL CONTRIBUTION

    EX1 = EX1 * EX11
    EX2 = EX2 * EX12
    FN41 = IG401 * (IG411 + IG421 * (R - 4) + IG431 * (R - 4) ** 2 + IG441 * (R - 4) ** 3)
    FN42 = IG402 * (IG412 + IG422 * (R - 4) + IG432 * (R - 4) ** 2 + IG442 * (R - 4) ** 3)
    DRRG = DRRG + EX1 * (DF4DE + (R - 4) * FN41 * DTE) + 2 * EX2 * (DIF4DE + (R - 4) * FN42 * DITE)
    if R <= 5:
        return np.pi*DRRG/(6*R)

    # C         FIFTH SHELL CONTRIBUTION

    EX1 = EX1 * EX11
    EX2 = EX2 * EX12
    FN51 = IG501 * (IG511 + IG521 * (R - 5) + IG531 * (R - 5) ** 2 + IG541 * (R - 5) ** 3 + IG551 * (R - 5) ** 4)
    FN52 = IG502 * (IG512 + IG522 * (R - 5) + IG532 * (R - 5) ** 2 + IG542 * (R - 5) ** 3 + IG552 * (R - 5) ** 4)
    DRRG = DRRG + EX1 * (DF5DE + (R - 5) * FN51 * DTE) + 2 * EX2 * (DIF5DE + (R - 5) * FN52 * DITE)
    return np.pi*DRRG/(6*R)


"""
C                                                                     
C     !%--------------------------------------------------------------%!
C
"""

def DRRG(R1):
    """
    C
    C     Calculates the derivative of the Radial Distribution Function
    C
    """
    global C1, C2, C3
    global IG102,IG202,IG212,IG222,IG302,IG312,IG322,IG332 ,IG402,IG412,IG422,IG432,IG442,IG502,IG512,IG522,IG532,IG542
    global IG552,IT2,EX12,IG101,IG201,IG211,IG221,IG301,IG311,IG321,IG331,IG401,IG411,IG421,IG431,IG441,IG501,IG511
    global IG521,IG531,IG541,IG551,IT1,EX11,ETA
    global ISP,XF1,XF2,XF3,XF4,XF5,ETAM,LT1,LT2,ILT,ISPC,ILTC,SDP,ISDP,IXL1,IXL2,IXL3,IXL4,IXL5
    global EX12,IG102,IG202,IG212,IG222,IG302,IG312,IG322,IG332,IG402,IG412,IG422,IG432,IG442,IG502,IG512,IG522
    global IG532,IG542,IG552,IT2, DCMPLX,CDEXP,IXL1C,IXL2C,IXL3C,IXL4C,IXL5C,ILTC,JX,ISPC,ISDPC,IXX1C
    global DF1DE, DIF1DE, DTE, DITE, DF2DE, DIF2DE, DF3DE, DIF3DE, DF4DE, DIF4DE, DF5DE, DIF5DE

    global DEC1,DEC2,DEC3

    R=R1
    DRRG = 0
    if R >= 1 and R <= 6:
        DRRG = DRRG_Shells(R)

    elif R > 6:
        RHO = ETA * 6 / np.pi
        A = 3.64779052 - 4.5326958 * RHO + 2.8254675 * RHO ** 1.5 - 1.1230973 * np.log(RHO) / RHO + 0.02371867 * np.log(RHO) / RHO ** 2
        B = 7.0399098 - 13.686034 * RHO - 0.85088666 * RHO ** 3 + 2.9323443 * np.exp(RHO) + 6.6465928 * np.sqrt(RHO) * np.log(RHO)
        C = 5.9382949 + 3.7429435 * RHO + 1.108728 * RHO ** 2 * np.log(RHO) - 0.96469546 * np.exp(RHO) + 0.19983335 * np.log(RHO)
        D = 1.1350252 - 1.9259676 * RHO - 1.8835841 * RHO ** 2 * np.log(RHO) + 1.0381572 * RHO ** 3 + 0.00007112 * np.log(RHO)
        DA = 2.2578288 - 2.6419506 / RHO - 0.57462084 / RHO ** 2 - 0.49861017 / RHO ** 3 + 0.03826629 / RHO ** 4
        DB = -1.1150611 + 1.5019557 * RHO - 1.5365115 * RHO ** 1.5 + 0.79801674 * RHO ** 3 - 1.2700068 / RHO
        DC = 2.5339359 - 5.0383713 * RHO + 6.0947248 * RHO ** 1.5 - 1.3679322 * RHO ** 2.5 + 0.20489549 / RHO
        DD = -18.494398 + 17.445882 * RHO - 16.716728 * np.sqrt(RHO) * np.log(RHO) + 0.45062181 / RHO ** 1.5 - 0.12072079 / RHO ** 2
        DRRG = np.exp(-B * R) * (DA * np.sin(C * R + D) + np.cos(C * R + D) * A * (DC * R + DD) - R * DB * np.sin(C * R + D) * A) / R
    elif R < 1:
        # C     The following calculates the density derivative of Y(R) for r<1.
        R3 = R * R * R
        DRRG = (DEC1 + DEC2 * R + DEC3 * R3) * np.pi / (6)

    return np.real(DRRG)

############################################################################################
#
#                         PROGRAM      STARTS        HERE
#
############################################################################################
global C1, C2, C3
global IG102, IG202, IG212, IG222, IG302, IG312, IG322, IG332, IG402, IG412, IG422, IG432, IG442, IG502, IG512, IG522, IG532, IG542
global IG552, IT2, EX12, IG101, IG201, IG211, IG221, IG301, IG311, IG321, IG331, IG401, IG411, IG421, IG431, IG441, IG501, IG511
global IG521, IG531, IG541, IG551, IT1, EX11, ETA
global ISP, XF1, XF2, XF3, XF4, XF5, ETAM, LT1, LT2, ILT, ISPC, ILTC, SDP, ISDP, IXL1, IXL2, IXL3, IXL4, IXL5
global EX12, IG102, IG202, IG212, IG222, IG302, IG312, IG322, IG332, IG402, IG412, IG422, IG432, IG442, IG502, IG512, IG522
global IG532, IG542, IG552, IT2, DCMPLX, CDEXP, IXL1C, IXL2C, IXL3C, IXL4C, IXL5C, ILTC, JX, ISPC, ISDPC, IXX1C

global DEC1,DEC2,DEC3

D=1.0
#     YOU CAN USE ANY UNITS YOU WANT BUT IF D=1 DISTANCES ARE IN UNITS OF R/D
DR=0.1
NR=1
RHO=1.0
RHOD = RHO * (D**3)
#     GRPRLM GIVES THE PY APPROXIMATION;
GRPRLM(RHOD)
#
print(RHO)
"""
C
C     YOU HAVE NOW SET UP THE CONSTANTS WHICH DEPEND UPON RHO BUT ARE 
c     INDEPENDANT OF R.
C                                                                                
C     WHEN YOU COME TO THE PART OF THE PROGRAM WHICH NEEDS Y(R) OR G(R)
C     DO SOMETHING LIKE THE FOLLOWING
"""
FLAG=2

fmt = ':6.4f'
if FLAG >= 1:
    for J in range(1,102):
        R=(J-1)*DR
        RD=R/D
        Y=GR(RD)
        GRPRLD(RHOD,RD)
        DY=DRRG(RD)
        #       IF(RD.LT.1)Y=0
        #       IF(RD.LT.1)DY=0
        print('R = {:6.4f} g(r) = {:6.4f} dg(r) = {:6.4f}'.format(RD, Y, DY))
else:
    for J in range(1,102):
        R=(J-1)*DR
        RD=R/D
        Y=GR(RD)
        if RD < 1: Y = 0
        print("R = {:6.4f} g(r) = {:6.4f}".format(RD,Y) )  # PRINT 1003,RD,Y
